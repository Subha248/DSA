
---

## ⚙️ Java Method Overloading — Explained Simply

### 🧩 **Definition**

> Method Overloading means **defining multiple methods with the same name** but **different parameter lists** (type, number, or order).

---

### ✅ **Example**

```java
public class OverloadDemo {
    static void fun(int a, int b) {
        System.out.println("int version: " + a + " " + b);
    }

    static void fun(String a, String b) {
        System.out.println("String version: " + a + " " + b);
    }

    static void fun(int a, String b) {
        System.out.println("mixed version: " + a + " " + b);
    }

    public static void main(String[] args) {
        fun(1, 2);          // 👉 calls int version
        fun("ss", "dd");    // 👉 calls string version
        fun(10, "hi");      // 👉 calls mixed version
    }
}
```

**🖨 Output:**

```
int version: 1 2
String version: ss dd
mixed version: 10 hi
```

---

### 🧠 **Rules**

| Rule                            | Explanation                                                    |
| ------------------------------- | -------------------------------------------------------------- |
| 🔹 Same method name             | All methods must share the same name                           |
| 🔹 Different parameter list     | Can differ by **number**, **type**, or **order** of parameters |
| 🔹 Parameter names don’t matter | `(int a, int b)` and `(int x, int y)` ❌ same thing             |
| 🔹 Return type doesn’t matter   | You **can’t** overload methods only by changing return type    |
| 🔹 Java picks the best match    | Based on the arguments you pass                                |

---

### 🚫 **Invalid Overloads**

```java
static int fun(int a) { return a; }
static double fun(int x) { return x; }  // ❌ Error — same (int) parameter list
```

---

### 🌼 **Summary**

> Overloading = same name, different parameter types/order.
> Java looks only at **(method name + parameter types)**, not parameter names or return type.

---

### 🏷️ **Tags**

`#Java` `#MethodOverloading` `#OOP` `#BeginnerFriendly` `#CoreConcepts`

---

